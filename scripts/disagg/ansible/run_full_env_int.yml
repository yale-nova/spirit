- hosts: servers
  vars:
    application_config: "{{ application_config }}"
    res_alloc_config: "{{ res_alloc_config }}"
    res_alloc_interval: "{{ res_alloc_interval }}"
    mind_script_dir: "/home/sslee/mind_next/scripts"
    global_enforcer_port: 8000  # since it's inside container; outside the container, it should be 8001
    # = times =
    spirit_timeout: 1500 # default: 15 sec x 100 iterations
    # retries * delay = should be => timeout
    spirit_retries: 10
    spirit_delay: 150
    # warmup and margin
    spirit_wampup: 80
    async_margin: 10

  tasks:
  # Build without sudo
  - name: Build the local enforcer
    ansible.builtin.command:
      cmd: cargo build --release --manifest-path local-enforcer/Cargo.toml
    become: no  # Run as the normal user
    args:
      chdir: /opt/spirit/spirit-controller
    environment:
      PATH: "/users/{{ ansible_user_id }}/.cargo/bin:{{ ansible_env.PATH }}"

  # Remove any previous container and reset mind dev
  - name: Get list of all Docker containers, stop and remove those with prefix 'spirit_'
    ansible.builtin.command:
      cmd: local-enforcer/scripts/terminate_spirit_containers.sh
    args:
      chdir: /opt/spirit/spirit-controller
    become: yes

  # Clean up the previous run
  - name: Clean up the previous run (remote)
    ansible.builtin.command:
      cmd: local-enforcer/scripts/clean_up_enforcers.sh
    args:
      chdir: /opt/spirit/spirit-controller
    become: yes

  - name: Clean up the previous run (localhost)
    ansible.builtin.command:
      cmd: local-enforcer/scripts/clean_up_enforcers.sh
    delegate_to: localhost
    args:
      chdir: /spirit-controller
    become: yes

  # Global enforcer
  - name: Run the global enforcer
    ansible.builtin.command:
      cmd: local-enforcer/scripts/run_with_timeout.sh "{{ spirit_timeout + spirit_wampup + spirit_wampup }}" just global-run "{{ global_enforcer_port }}" /config.json
    delegate_to: localhost
    args:
        chdir: /spirit-controller
    async: "{{ spirit_timeout + spirit_delay + spirit_wampup + spirit_wampup + async_margin}}"  # Slightly longer than the script's timeout to ensure the script can complete its logic
    poll: 0
    register: async_global_enforcer

  - name: Wait for global enforcer to start
    pause:
      seconds: 5

  # Local enforcer
  - name: Run the local enforcer with a timeout script
    ansible.builtin.command:
      cmd: local-enforcer/scripts/run_with_timeout.sh "{{ spirit_timeout + spirit_wampup + spirit_wampup}}" ./target/release/local-enforcer "{{ application_config }}"
    args:
      chdir: /opt/spirit/spirit-controller
    become: yes
    async: "{{ spirit_timeout + spirit_wampup + spirit_wampup + async_margin }}"  # Slightly longer than the script's timeout to ensure the script can complete its logic
    poll: 0
    register: async_local_enforcer

  # Wait for the local enforcer to start
  - name: Wait for local enforcer to start
    pause:
      seconds: 10

  - name: Run the benchmark clients
    shell: |
        pwd
        cd local-enforcer/scripts/
        /opt/spirit/spirit-controller/myenv/bin/python run_clients.py "{{ application_config }}"
    args:
      executable: /bin/bash
      chdir: /opt/spirit/spirit-controller/
    register: client_launch_output

  - name: Print output
    ansible.builtin.debug:
      var: client_launch_output.stdout_lines

  # Wait for warmup
  - name: Warm up the application
    ansible.builtin.wait_for:
      timeout: "{{ async_margin }}"
    become: no

  # Start resource allocator
  - name: Run resource allocator
    ansible.builtin.command:
     cmd: local-enforcer/scripts/run_with_timeout.sh "{{ (spirit_timeout | int) + spirit_wampup}}" /spirit-controller/local-enforcer/scripts/run_res_alloc.sh "{{ res_alloc_config }}"
    delegate_to: localhost
    args:
        chdir: /spirit-controller
    async: "{{ (spirit_timeout | int) + spirit_wampup + async_margin}}"  # Slightly longer than the script's timeout to ensure the script can complete its logic
    poll: 0
    register: async_resource_allocator

  # Wait for warmup
  - name: Warm up the application
    ansible.builtin.wait_for:
      timeout: "{{ spirit_wampup }}"
    become: no

  # If we wait for this, everything should be done
  - name: Wait for the asynchronous task to complete (global enforcer)
    ansible.builtin.async_status:
      jid: "{{ async_global_enforcer.ansible_job_id }}"
    register: job_result
    until: job_result.finished
    retries: "{{ spirit_retries + 1 }}"  # Use the retries variable
    delay: "{{ spirit_delay }}"  # Use the delay variable
    delegate_to: localhost  # Run on the local machine
    become: yes  # Use elevated privileges if required

  # Remove containers
  - name: Get list of all Docker containers, stop and remove those with prefix 'spirit_'
    ansible.builtin.command:
      cmd: local-enforcer/scripts/terminate_spirit_containers.sh
    args:
      chdir: /opt/spirit/spirit-controller
    become: yes
