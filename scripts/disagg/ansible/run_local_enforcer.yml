- hosts: servers
  vars:
    spirit_cache_limit_mb: "{{ spirit_cache_limit_mb }}"
    spirit_bw_limit_mbps: "{{ spirit_bw_limit_mbps }}"
    application_config: "{{ application_config }}"
    mind_script_dir: "/home/sslee/mind_next/scripts"
    global_enforcer_port: 8000  # since it's inside container; outside the container, it should be 8001
    # Metric port for CDF
    # - 8001 for dlrm inference and others
    # - 8002 for Memcached (to get data from client not enforcer)
    metric_server_port: 8001
    # = times =
    spirit_preload: 10
    spirit_timeout: 1800
    # retries * delay = should be => timeout
    spirit_retries: 10
    spirit_delay: 180
    spirit_wampup: 80
    async_margin: 10

  tasks:
  # Build without sudo
  - name: Build the local enforcer
    ansible.builtin.command:
      cmd: cargo build --release --manifest-path local-enforcer/Cargo.toml
    become: no  # Run as the normal user
    args:
      chdir: /opt/spirit/spirit-controller
    environment:
      PATH: "/users/{{ ansible_user_id }}/.cargo/bin:{{ ansible_env.PATH }}"

  # Remove any previous container and reset mind dev
  - name: Get list of all Docker containers, stop and remove those with prefix 'spirit_'
    ansible.builtin.command:
      cmd: local-enforcer/scripts/terminate_spirit_containers.sh
    args:
      chdir: /opt/spirit/spirit-controller
    become: yes

  # - name: Run 2a.remove_swap_only.sh
  #   ansible.builtin.command:
  #     cmd: "{{ mind_script_dir }}/2a.remove_swap_only.sh"
  #   become: yes

  # - name: Wait for removing swap
  #   pause:
  #     seconds: 30

  # - name: Cool down between runs
  #   pause:
  #     seconds: "{{ spirit_wampup }}"

  # - name: Run 1a.setup_mind_swap_only.sh
  #   ansible.builtin.command:
  #     cmd: "{{ mind_script_dir }}/1a.setup_mind_swap_only.sh"
  #   become: yes

  # - name: Wait for swap to be activated
  #   pause:
  #     seconds: 30

  # Clean up the previous run
  - name: Clean up the previous run (remote)
    ansible.builtin.command:
      cmd: local-enforcer/scripts/clean_up_enforcers.sh
    args:
      chdir: /opt/spirit/spirit-controller
    become: yes

  - name: Clean up the previous run (localhost)
    ansible.builtin.command:
      cmd: local-enforcer/scripts/clean_up_enforcers.sh
    delegate_to: localhost
    args:
      chdir: /spirit-controller
    become: yes

  # Global enforcer
  - name: Run the global enforcer
    ansible.builtin.command:
      cmd: local-enforcer/scripts/run_with_timeout.sh "{{ spirit_timeout + spirit_wampup + spirit_preload }}" just global-run "{{ global_enforcer_port }}" /config.json
    delegate_to: localhost
    args:
        chdir: /spirit-controller
    async: "{{ spirit_timeout + spirit_delay + spirit_wampup + spirit_preload + async_margin}}"  # Slightly longer than the script's timeout to ensure the script can complete its logic
    poll: 0
    register: async_global_enforcer

  - name: Wait for global enforcer to start
    pause:
      seconds: 10

  # Local enforcer
  - name: Run the local enforcer with a timeout script
    ansible.builtin.command:
      cmd: local-enforcer/scripts/run_with_timeout.sh "{{ spirit_timeout + spirit_preload}}" ./target/release/local-enforcer "{{ application_config }}"
    args:
      chdir: /opt/spirit/spirit-controller
    become: yes
    async: "{{ spirit_timeout + spirit_preload + async_margin }}"  # Slightly longer than the script's timeout to ensure the script can complete its logic
    poll: 0
    register: async_local_enforcer

  # Wait for the local enforcer to start
  - name: Wait for local enforcer to start
    pause:
      seconds: 10

  - name: Run the benchmark clients
    shell: |
        pwd
        cd local-enforcer/scripts/
        /opt/spirit/spirit-controller/myenv/bin/python run_clients.py "{{ application_config }}"
    args:
      executable: /bin/bash
      chdir: /opt/spirit/spirit-controller/
    register: client_launch_output

  - name: Print output
    ansible.builtin.debug:
      var: client_launch_output.stdout_lines

  # Wait for warmup
  - name: Warm up the application
    ansible.builtin.wait_for:
      timeout: "{{ async_margin }}"
    become: no
  # - name: Preload the application
  #   ansible.builtin.wait_for:
  #     timeout: "{{ spirit_preload }}"
  #   become: no

  # Enforce resources
  - name: Allocate resources
    ansible.builtin.command:
      cmd: >
        curl -i -X POST -H "Content-Type: application/json"
        -d '{"allocation_map": {"1": [{{spirit_cache_limit_mb | int}}, {{spirit_bw_limit_mbps | int}}]}}'
        http://localhost:{{ global_enforcer_port }}/config
    delegate_to: localhost
  - name: Allocate resources
    ansible.builtin.command:
      cmd: >
        curl -i -X POST -H "Content-Type: application/json"
        -d '{"allocation_map": {"2": [{{spirit_cache_limit_mb | int}}, {{spirit_bw_limit_mbps | int}}]}}'
        http://localhost:{{ global_enforcer_port }}/config
    delegate_to: localhost
  - name: Allocate resources
    ansible.builtin.command:
      cmd: >
        curl -i -X POST -H "Content-Type: application/json"
        -d '{"allocation_map": {"3": [{{spirit_cache_limit_mb | int}}, {{spirit_bw_limit_mbps | int}}]}}'
        http://localhost:{{ global_enforcer_port }}/config
    delegate_to: localhost

  # Wait for resource allocation
  - name: Wait for resource allocation
    ansible.builtin.wait_for:
      timeout: "{{ spirit_wampup }}"
    become: no

  # Performance measurement
  - name: Start performance measurement
    ansible.builtin.command:
      cmd: local-enforcer/scripts/run_with_timeout.sh "{{ spirit_timeout - spirit_wampup}}" local-enforcer/scripts/perf_measurement.sh "{{ global_enforcer_port }}" "{{spirit_cache_limit_mb}}" "{{spirit_bw_limit_mbps}}"
    delegate_to: localhost
    args:
        chdir: /spirit-controller
    async: "{{ spirit_timeout }}"  # Slightly longer than the script's timeout to ensure the script can complete its logic
    poll: 0

  # If we wait for this, everything should be done
  - name: Wait for the asynchronous task to complete (global enforcer)
    ansible.builtin.async_status:
      jid: "{{ async_global_enforcer.ansible_job_id }}"
    register: job_result
    until: job_result.finished
    retries: "{{ spirit_retries + 1 }}"  # Use the retries variable
    delay: "{{ spirit_delay }}"  # Use the delay variable
    delegate_to: localhost  # Run on the local machine
    become: yes  # Use elevated privileges if required

  # Collect the cdf and throughput results
  - name: Collect the cdf and throughput results
    ansible.builtin.command:
      cmd: local-enforcer/scripts/perf_collect_cdf_disagg.sh "{{ metric_server_port }}" "{{spirit_cache_limit_mb}}" "{{spirit_bw_limit_mbps}}"
    args:
      chdir: /spirit-controller
    delegate_to: localhost

  # TODO: check asyncs are done
  # Remove containers
  - name: Get list of all Docker containers, stop and remove those with prefix 'spirit_'
    ansible.builtin.command:
      cmd: local-enforcer/scripts/terminate_spirit_containers.sh
    args:
      chdir: /opt/spirit/spirit-controller
    become: yes